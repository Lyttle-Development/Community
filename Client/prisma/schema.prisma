generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////////////////////////////
// Client Section
////////////////////////////////////////////////////////////////////////////////////////

model User {
  // Primary key information
  user_id BigInt @id

  // Relations
  user__profile UserProfile?

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@map("user")
}

////////////////////////////////////////////////////////////////////////////////////////
// Client Relations
////////////////////////////////////////////////////////////////////////////////////////

model UserProfile {
  // Primary key information
  user_id BigInt @id

  // Relations
  user User @relation(fields: [user_id], references: [user_id])

  // Values
  tokens      Float @default(0)
  tokens_used Float @default(0)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@map("user__profile")
}

////////////////////////////////////////////////////////////////////////////////////////
// Guild Section
////////////////////////////////////////////////////////////////////////////////////////

model Guild {
  // Primary key information
  guild_id BigInt @id

  // Relations
  // - Members
  members Member[]

  // - Cache
  guild__translations GuildTranslation[]

  // - Modules
  guild__module__level           GuildModuleLevel?
  guild__module__birthday        GuildModuleBirthday?
  guild__module__easter_egg      GuildModuleEasterEgg?
  guild__module__count_to_number GuildModuleCountToNumber[]
  guild__module__voice_growth    GuildModuleVoiceGrowth[]

  // Values
  enabled Boolean @default(true)

  // Date information
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now()) @updatedAt
  GuildAction GuildAction[]

  // Refactors
  @@map("guild")
}

////////////////////////////////////////////////////////////////////////////////////////
// Guild Relations - Cache
////////////////////////////////////////////////////////////////////////////////////////

// Todo: Create Messages

model GuildTranslation {
  // Primary key information
  guild_id BigInt

  // Relations
  guild Guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  key   String
  value String

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@id([guild_id, key])
  @@map("guild__translation")
}

model GuildAction {
  // Primary key information
  id Int @id @default(autoincrement())

  // Relations
  guild Guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  key      String
  values   String
  guild_id BigInt
  executed Boolean @default(false)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@map("guild__action")
}

////////////////////////////////////////////////////////////////////////////////////////
// Guild Relations - Modules
////////////////////////////////////////////////////////////////////////////////////////

model GuildModuleLevel {
  // Primary key information
  guild_id BigInt @id

  // Relations
  guild Guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled                 Boolean  @default(false)
  leveling_multiplier     Int      @default(8)
  announcement_channel_id BigInt?
  leaderboard_channel_id  BigInt?
  leaderboard_last_week   Int?
  nicknames               Boolean  @default(false)
  last_leaderboard        DateTime @default(now())

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@map("guild__module__level")
}

model GuildModuleEasterEgg {
  // Primary key information
  guild_id BigInt @id

  // Relations
  guild Guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled    Boolean  @default(false)
  last_joker DateTime @default(now())

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@map("guild__module__easter_egg")
}

model GuildModuleCountToNumber {
  // Primary key information
  channel_id BigInt
  guild_id   BigInt

  // Relations
  guild Guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled        Boolean  @default(false)
  next_date      DateTime @default(now())
  thread_id      BigInt   @default(0)
  last_number    Int      @default(0)
  last_member_id BigInt   @default(0)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@id([guild_id, channel_id])
  @@map("guild__module__count_to_number")
}

model GuildModuleVoiceGrowth {
  // Primary key information
  channel_id BigInt
  guild_id   BigInt

  // relations
  childs GuildModuleVoiceGrowthChild[]
  guild  Guild                         @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled Boolean @default(false)
  preset  String?
  prefix  String?
  manual  Boolean @default(false)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@id([guild_id, channel_id])
  @@map("guild__module__voice_growth")
}

model GuildModuleVoiceGrowthChild {
  // Primary key information
  channel_id BigInt
  master_id  BigInt
  guild_id   BigInt

  // Relations
  master GuildModuleVoiceGrowth @relation(fields: [master_id, guild_id], references: [channel_id, guild_id])

  // Values
  name String @default("unknown")

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@id([guild_id, channel_id])
  @@map("guild__module__voice_growth__child")
}

model GuildModuleBirthday {
  // Primary key information
  guild_id BigInt @id

  // Relations
  guild Guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled             Boolean @default(false)
  birthday_channel_id BigInt?

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@map("guild__module__birthday")
}

////////////////////////////////////////////////////////////////////////////////////////
// Member Section
////////////////////////////////////////////////////////////////////////////////////////

model Member {
  // Primary key information
  user_id  BigInt
  guild_id BigInt

  // Relations
  guild                 Guild              @relation(fields: [guild_id], references: [guild_id])
  member__module__level MemberModuleLevel?

  // Values
  birthday_date DateTime?
  birthday      Int?
  nickname      String?

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@id([guild_id, user_id])
  @@unique([user_id, guild_id])
  @@map("member")
}

////////////////////////////////////////////////////////////////////////////////////////
// Member Relations - Modules
////////////////////////////////////////////////////////////////////////////////////////

model MemberModuleLevel {
  // Primary key information
  user_id  BigInt
  guild_id BigInt

  // Relations
  member                     Member                @relation(fields: [user_id, guild_id], references: [user_id, guild_id])
  member__module__level__day MemberModuleLevelDay?

  // Checks
  spam_check     Int      @default(0)
  cooldown_count Int      @default(0)
  cooldown_time  DateTime @default(now())
  call_start     DateTime @default(now())

  // Actual level data:
  points Float @default(0)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@id([guild_id, user_id])
  @@unique([user_id, guild_id])
  @@map("member__module__level")
}

model MemberModuleLevelDay {
  // Primary key information
  user_id  BigInt
  guild_id BigInt

  // Relations
  member__module__level MemberModuleLevel @relation(fields: [user_id, guild_id], references: [user_id, guild_id])

  // Values
  points_monday    Int @default(0)
  points_tuesday   Int @default(0)
  points_wednesday Int @default(0)
  points_thursday  Int @default(0)
  points_friday    Int @default(0)
  points_saturday  Int @default(0)
  points_sunday    Int @default(0)
  points           Int @default(0) // Todo: Check if needed

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Refactors
  @@id([guild_id, user_id])
  @@unique([user_id, guild_id])
  @@map("member__module__level__day")
}
