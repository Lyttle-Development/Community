generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////////////////////////////////////
// Client Section
////////////////////////////////////////////////////////////////////////////////////////

model user {
  // Primary key information
  user_id BigInt @id

  // Relations
  user__profile user__profile?

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

////////////////////////////////////////////////////////////////////////////////////////
// Client Relations - Modules
////////////////////////////////////////////////////////////////////////////////////////

model user__profile {
  // Primary key information
  user_id BigInt @id

  // Relations
  user user @relation(fields: [user_id], references: [user_id])

  // Values
  tokens        Float     @default(0)
  birthday_date DateTime?
  birthday      Int?

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

////////////////////////////////////////////////////////////////////////////////////////
// Guild Section
////////////////////////////////////////////////////////////////////////////////////////

model guild {
  // Primary key information
  guild_id BigInt @id

  // Relations
  // - Members
  members member[]

  // - Modules
  guild__module__level           guild__module__level?
  guild__module__easter_egg      guild__module__easter_egg?
  guild__module__count_to_number guild__module__count_to_number[]
  guild__module__voice_growth    guild__module__voice_growth[]
  guild__module__birthday        guild__module__birthday[]

  // - Cache
  // Todo add cache

  // Values
  enabled Boolean @default(true)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

////////////////////////////////////////////////////////////////////////////////////////
// Guild Relations - Modules
////////////////////////////////////////////////////////////////////////////////////////

model guild__module__level {
  // Primary key information
  guild_id BigInt @id

  // Relations
  guild guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled                 Boolean  @default(false)
  announcement_channel_id BigInt?
  leaderboard_channel_id  BigInt?
  leaderboard_last_week   Int?
  nicknames               Boolean  @default(false)
  last_leaderboard        DateTime @default(now())

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model guild__module__easter_egg {
  // Primary key information
  guild_id BigInt @id

  // Relations
  guild guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled    Boolean  @default(false)
  last_joker DateTime @default(now())

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model guild__module__count_to_number {
  channel_id BigInt
  guild_id   BigInt

  // Relations
  guild guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled        Boolean  @default(false)
  next_date      DateTime @default(now())
  thread_id      BigInt   @default(0)
  last_number    Int      @default(0)
  last_member_id BigInt   @default(0)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Primary key information
  @@id([guild_id, channel_id])
}

model guild__module__voice_growth {
  channel_id BigInt
  guild_id   BigInt

  // relations
  childs guild__module__voice_growth__child[]
  guild  guild                                @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled Boolean @default(false)
  preset  String?
  prefix  String?
  manual  Boolean @default(false)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Primary key information
  @@id([guild_id, channel_id])
}

model guild__module__voice_growth__child {
  channel_id BigInt
  masterId   BigInt
  guild_id   BigInt

  // Relations
  master guild__module__voice_growth @relation(fields: [masterId, guild_id], references: [channel_id, guild_id])

  // Values
  name String @default("unknown")

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Primary key information
  @@id([guild_id, channel_id])
}

model guild__module__birthday {
  // Primary key information
  guild_id BigInt @id

  // Relations
  guild guild @relation(fields: [guild_id], references: [guild_id])

  // Values
  enabled             Boolean @default(false)
  birthday_channel_id BigInt?

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

////////////////////////////////////////////////////////////////////////////////////////
// Guild Relations - Cache
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
// Member Section
////////////////////////////////////////////////////////////////////////////////////////

model member {
  user_id  BigInt
  guild_id BigInt

  // Relations
  guild                      guild                       @relation(fields: [guild_id], references: [guild_id])
  member_level               member__module__level[]
  member__module__level__day member__module__level__day?

  // Values
  birthday_date DateTime?
  birthday      Int?

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Primary key information
  @@id([guild_id, user_id])
}

////////////////////////////////////////////////////////////////////////////////////////
// Member Relations - Modules
////////////////////////////////////////////////////////////////////////////////////////

model member__module__level {
  user_id  BigInt
  guild_id BigInt

  // Relations
  member                     member                       @relation(fields: [user_id, guild_id], references: [user_id, guild_id])
  member__module__level__day member__module__level__day[]

  // Checks
  spam_check     Int      @default(0)
  cooldown_count Int      @default(0)
  cooldown_time  DateTime @default(now())
  in_call        Boolean  @default(false)
  call_start     DateTime @default(now())
  call_alone     Boolean  @default(false)

  // Actual level data:
  points Float @default(0)

  // Date information
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Primary key information
  @@id([guild_id, user_id])
}

model member__module__level__day {
  user_id  BigInt
  guild_id BigInt

  // Relations
  member member @relation(fields: [user_id, guild_id], references: [user_id, guild_id])

  // Values
  points_monday    Int @default(0)
  points_tuesday   Int @default(0)
  points_wednesday Int @default(0)
  points_thuesday  Int @default(0)
  points_friday    Int @default(0)
  points_saturday  Int @default(0)
  points_sunday    Int @default(0)
  points           Int @default(0) // Todo: Check if needed

  // Date information
  created_at                    DateTime               @default(now())
  updated_at                    DateTime               @default(now()) @updatedAt
  member__module__level         member__module__level? @relation(fields: [member__module__levelGuild_id, member__module__levelUser_id], references: [guild_id, user_id])
  member__module__levelGuild_id BigInt?
  member__module__levelUser_id  BigInt?

  // Primary key information
  @@id([guild_id, user_id])
  @@unique([user_id, guild_id])
}
